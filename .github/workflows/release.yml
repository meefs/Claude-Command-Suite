name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/release.yml'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'scripts/**.md'
  workflow_dispatch:
    inputs:
      force-release:
        description: 'Force a release even without conventional commits'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ensure we have the full history
          if [ -f .git/shallow ]; then
            git fetch --unshallow
          fi

      - name: Get current version
        id: current-version
        run: |
          if [ -f version.txt ]; then
            CURRENT_VERSION=$(cat version.txt)
          else
            CURRENT_VERSION="0.0.0"
          fi
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Analyze commits
        id: analyze-commits
        run: |
          # Get the last tag or use initial commit
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Analyzing commits since: $LAST_TAG"
          
          # Initialize variables
          BUMP_TYPE="none"
          BREAKING_CHANGES=false
          NEW_FEATURES=false
          BUG_FIXES=false
          
          # Analyze commit messages
          while IFS= read -r commit; do
            if [[ "$commit" =~ ^(feat|feature)(\(.+\))?!: ]] || [[ "$commit" =~ BREAKING[[:space:]]CHANGE ]]; then
              BREAKING_CHANGES=true
              BUMP_TYPE="major"
            elif [[ "$commit" =~ ^(feat|feature)(\(.+\))?: ]]; then
              NEW_FEATURES=true
              if [ "$BUMP_TYPE" != "major" ]; then
                BUMP_TYPE="minor"
              fi
            elif [[ "$commit" =~ ^fix(\(.+\))?: ]]; then
              BUG_FIXES=true
              if [ "$BUMP_TYPE" = "none" ]; then
                BUMP_TYPE="patch"
              fi
            fi
          done < <(git log "$LAST_TAG"..HEAD --pretty=format:"%s")
          
          # Force release if requested
          if [ "${{ github.event.inputs.force-release }}" = "true" ] && [ "$BUMP_TYPE" = "none" ]; then
            BUMP_TYPE="patch"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "breaking_changes=$BREAKING_CHANGES" >> $GITHUB_OUTPUT
          echo "new_features=$NEW_FEATURES" >> $GITHUB_OUTPUT
          echo "bug_fixes=$BUG_FIXES" >> $GITHUB_OUTPUT
          
          echo "Bump type: $BUMP_TYPE"
          echo "Breaking changes: $BREAKING_CHANGES"
          echo "New features: $NEW_FEATURES"
          echo "Bug fixes: $BUG_FIXES"

      - name: Calculate new version
        id: new-version
        if: steps.analyze-commits.outputs.bump_type != 'none'
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"
          
          # Parse current version
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]:-0}"
          MINOR="${VERSION_PARTS[1]:-0}"
          PATCH="${VERSION_PARTS[2]:-0}"
          
          # Calculate new version
          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version file
        if: steps.analyze-commits.outputs.bump_type != 'none'
        run: |
          echo "${{ steps.new-version.outputs.version }}" > version.txt
          git add version.txt
          git commit -m "chore: bump version to ${{ steps.new-version.outputs.version }}"

      - name: Update CHANGELOG
        if: steps.analyze-commits.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.version }}"
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          # Create temporary file with updated changelog
          {
            # Header
            echo "# Changelog"
            echo ""
            echo "All notable changes to this project will be documented in this file."
            echo ""
            
            # Check if we have an [Unreleased] section
            if grep -q "## \[Unreleased\]" CHANGELOG.md; then
              # Extract the unreleased content and rename it
              echo "## [$NEW_VERSION] - $CURRENT_DATE"
              
              # Extract content between [Unreleased] and next version header
              awk '/## \[Unreleased\]/,/## \[[0-9]+\.[0-9]+\.[0-9]+\]/ {
                if (/## \[Unreleased\]/) next;
                if (/## \[[0-9]+\.[0-9]+\.[0-9]+\]/) exit;
                print
              }' CHANGELOG.md
            else
              # Generate new section from commits
              echo "## [$NEW_VERSION] - $CURRENT_DATE"
              echo ""
              
              if [ "${{ steps.analyze-commits.outputs.breaking_changes }}" = "true" ]; then
                echo "### ‚ö†Ô∏è BREAKING CHANGES"
                git log "$LAST_TAG"..HEAD --pretty=format:"%s" | grep -E "(^(feat|feature)(\(.+\))?!:|BREAKING CHANGE)" | sed 's/^/- /'
                echo ""
              fi
              
              if [ "${{ steps.analyze-commits.outputs.new_features }}" = "true" ]; then
                echo "### Added"
                git log "$LAST_TAG"..HEAD --pretty=format:"%s" | grep -E "^(feat|feature)(\(.+\))?:" | grep -v "!" | sed 's/^/- /'
                echo ""
              fi
              
              if [ "${{ steps.analyze-commits.outputs.bug_fixes }}" = "true" ]; then
                echo "### Fixed"
                git log "$LAST_TAG"..HEAD --pretty=format:"%s" | grep -E "^fix(\(.+\))?:" | sed 's/^/- /'
                echo ""
              fi
            fi
            
            # Add remaining changelog content (skip old Unreleased section)
            if grep -q "## \[Unreleased\]" CHANGELOG.md; then
              awk '/## \[[0-9]+\.[0-9]+\.[0-9]+\]/ { found=1 } found' CHANGELOG.md
            else
              tail -n +5 CHANGELOG.md
            fi
          } > CHANGELOG.tmp
          
          mv CHANGELOG.tmp CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for v$NEW_VERSION"

      - name: Update README badges
        if: steps.analyze-commits.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.version }}"
          
          # Update version badge in README if it exists
          if grep -q "img.shields.io/badge/version-" README.md; then
            sed -i "s|img.shields.io/badge/version-[0-9.]*-blue|img.shields.io/badge/version-$NEW_VERSION-blue|g" README.md
            git add README.md
            git commit -m "docs: update version badge to v$NEW_VERSION" || true
          fi

      - name: Create bundle
        if: steps.analyze-commits.outputs.bump_type != 'none'
        run: |
          # Create a release bundle with all commands
          mkdir -p release-artifacts
          
          # Create the bundle
          tar -czf "release-artifacts/claude-commands-v${{ steps.new-version.outputs.version }}.tar.gz" \
            --exclude='.git' \
            --exclude='release-artifacts' \
            --exclude='.github' \
            --exclude='.DS_Store' \
            .claude/commands/ \
            install.sh \
            README.md \
            CHANGELOG.md \
            CONTRIBUTING.md
          
          # Also create a commands-only bundle
          cd .claude/commands
          tar -czf "../../release-artifacts/commands-only-v${{ steps.new-version.outputs.version }}.tar.gz" *.md
          cd ../..
          
          echo "Release artifacts created"

      - name: Push changes
        if: steps.analyze-commits.outputs.bump_type != 'none'
        run: |
          echo "Branch protection requires PR, skipping direct push to main..."
          echo "Version files updated locally for release creation"

      - name: Generate release notes
        if: steps.analyze-commits.outputs.bump_type != 'none'
        id: release-notes
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.version }}"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Start release notes
          {
            echo "## What's Changed in v$NEW_VERSION"
            echo ""
            
            # Add summary based on bump type
            case "${{ steps.analyze-commits.outputs.bump_type }}" in
              major)
                echo "### ‚ö†Ô∏è Major Release with Breaking Changes"
                echo ""
                echo "This release includes breaking changes. Please review the changelog carefully before upgrading."
                ;;
              minor)
                echo "### ‚ú® New Features and Improvements"
                echo ""
                echo "This release includes new commands and features."
                ;;
              patch)
                echo "### üêõ Bug Fixes and Maintenance"
                echo ""
                echo "This release includes bug fixes and maintenance updates."
                ;;
            esac
            echo ""
            
            # Extract changelog section for this version
            echo "### Changelog"
            echo ""
            awk "/## \[$NEW_VERSION\]/,/## \[[0-9]+\.[0-9]+\.[0-9]+\]/ {
              if (/## \[$NEW_VERSION\]/) next;
              if (/## \[[0-9]+\.[0-9]+\.[0-9]+\]/) exit;
              print
            }" CHANGELOG.md
            echo ""
            
            # Add commit summary
            echo "### Commits"
            echo ""
            if [ -n "$LAST_TAG" ]; then
              git log "$LAST_TAG"..HEAD --pretty=format:"- %s (@%an)" | head -20
              COMMIT_COUNT=$(git rev-list "$LAST_TAG"..HEAD --count)
              if [ "$COMMIT_COUNT" -gt 20 ]; then
                echo ""
                echo "...and $((COMMIT_COUNT - 20)) more commits"
              fi
            else
              echo "Initial release"
            fi
            echo ""
            
            # Add installation instructions
            echo "### Installation"
            echo ""
            echo "Download the latest release bundle and run:"
            echo '```bash'
            echo "tar -xzf claude-commands-v$NEW_VERSION.tar.gz"
            echo "./install.sh"
            echo '```'
            echo ""
            echo "Or install specific commands only:"
            echo '```bash'
            echo "tar -xzf commands-only-v$NEW_VERSION.tar.gz -C .claude/commands/"
            echo '```'
            
          } > release-notes.md
          
          # Save to output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.analyze-commits.outputs.bump_type != 'none'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.new-version.outputs.version }}"
          name: "v${{ steps.new-version.outputs.version }}"
          body: "${{ steps.release-notes.outputs.notes }}"
          draft: false
          prerelease: false
          files: |
            release-artifacts/claude-commands-v${{ steps.new-version.outputs.version }}.tar.gz
            release-artifacts/commands-only-v${{ steps.new-version.outputs.version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on related PRs
        if: steps.analyze-commits.outputs.bump_type != 'none'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.new-version.outputs.version }}';
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${version}`
            });
            
            // Get commits since last tag
            const lastTag = '${{ steps.current-version.outputs.version }}';
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: `v${lastTag}`,
              head: 'main'
            });
            
            // Extract PR numbers from commit messages
            const prNumbers = new Set();
            comparison.commits.forEach(commit => {
              const prMatch = commit.commit.message.match(/#(\d+)/);
              if (prMatch) {
                prNumbers.add(prMatch[1]);
              }
            });
            
            // Comment on each PR
            for (const prNumber of prNumbers) {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `üéâ This PR was included in [v${version}](${release.html_url})!`
                });
              } catch (error) {
                console.log(`Could not comment on PR #${prNumber}: ${error.message}`);
              }
            }

      - name: Summary
        run: |
          if [ "${{ steps.analyze-commits.outputs.bump_type }}" != "none" ]; then
            echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ steps.current-version.outputs.version }} ‚Üí ${{ steps.new-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Type**: ${{ steps.analyze-commits.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Breaking Changes**: ${{ steps.analyze-commits.outputs.breaking_changes }}" >> $GITHUB_STEP_SUMMARY
            echo "- **New Features**: ${{ steps.analyze-commits.outputs.new_features }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Bug Fixes**: ${{ steps.analyze-commits.outputs.bug_fixes }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ÑπÔ∏è No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No conventional commits found that would trigger a release." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To trigger a release, use conventional commit format:" >> $GITHUB_STEP_SUMMARY
            echo "- \`feat:\` for new features (minor bump)" >> $GITHUB_STEP_SUMMARY
            echo "- \`fix:\` for bug fixes (patch bump)" >> $GITHUB_STEP_SUMMARY
            echo "- \`feat!:\` or \`BREAKING CHANGE:\` for breaking changes (major bump)" >> $GITHUB_STEP_SUMMARY
          fi